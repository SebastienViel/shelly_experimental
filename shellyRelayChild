/*

 */

metadata
{
    definition(name: "Shelly Relay Child", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Refresh"
        capability "RelaySwitch"
        capability "Switch"
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input "relayNum", "text", title: "Relay number of this child", required: true
    }
}

def setupDetails(details)
{
    device.updateSetting("relayNum", details.relayNum)
    
    // write button type as "detached" so that output is software-controlled only
    getParent()?.getCommon()?.writeSetting("relay/${details.relayNum}/btn_type", "detached")
}

def setCallbackURLs(URL)
{
    appendCallbackURLs("out_on_url", URL)
    appendCallbackURLs("out_off_url", URL)
}

def appendCallbackURLs(name, URL)
{
    def actions = getParent()?.getCommon()?.readSettingAction()?.actions
    
    // don't overwrite existing URLs, in case they were important to the user
    def existingUrls = actions?.getAt(name)?.getAt(relayNum.toInteger())?.getAt("urls")  
    if(!existingUrls?.contains(URL.toString()))
    {
        existingUrls += URL
    }
    
    URL = existingUrls.collect{it}.join("&urls[]=")
    
    getParent()?.getCommon()?.writeSettingAction(name, relayNum.toInteger(), URL, true)
}

def on()
{
    getParent()?.getCommon()?.hitEntrypoint("relay/${relayNum}?turn=on")
    runIn(1, refresh)
}

def off()
{
    getParent()?.getCommon()?.hitEntrypoint("relay/${relayNum}?turn=off")
    runIn(1, refresh)
}

def refresh()
{
    def relay = readRelay()
    if(relay)
    {
        sendEvent(name: "switch", value: relay.ison ? "on" : "off")
    }
}

def readRelay()
{
    return getParent()?.getCommon()?.hitEntrypoint("relay/${relayNum}")
}
