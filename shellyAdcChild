/*

 */

metadata
{
    definition(name: "Shelly ADC Child", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Refresh"
        capability "VoltageMeasurement"
    }
}

preferences
{
    section
    {
        input "adcNum", "text", title: "ADC number of this child", required: true
        input name: "voltageOffset", type: "number", title: "Voltage Offset", description: "Add this voltage value to ADC readings to compensate for any offset.", defaultValue: "-0.4"
    }
}

def setupDetails(details)
{
    device.updateSetting("adcNum", details.adcNum)
}

def setCallbackURLs(URL)
{
    appendCallbackURLs("adc_over_url", URL)
    appendCallbackURLs("adc_under_url", URL)
}

def appendCallbackURLs(name, URL)
{
    def actions = getParent()?.getCommon()?.readSettingAction()?.actions
    
    // don't overwrite existing URLs, in case they were important to the user
    def existingUrls = actions?.getAt(name)?.getAt(adcNum.toInteger())?.getAt("urls")  
    if(!existingUrls?.contains(URL.toString()))
    {
        existingUrls += URL
    }
    
    URL = existingUrls.collect{it}.join("&urls[]=")
    
    getParent()?.getCommon()?.writeSettingAction(name, adcNum.toInteger(), URL, true)
}

def refresh()
{
    def adc = readADC()
    if(adc)
    {
        sendEvent(name: "voltage", value: (adc.voltage.toFloat() + voltageOffset.toFloat()).round(2))
    }
}

def readADC()
{
    return getParent()?.getCommon()?.readStatus(false)?.adcs?.getAt(adcNum.toInteger())
}
