/*

 */

metadata
{
    definition(name: "Shelly Uni", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Configuration"
        capability "Initialize"
        capability "Refresh"
        
        command "disableLogin"
        
        attribute "extTempSensorValue", "number"
        attribute "extTempSensorPresent", "string"
    }
}

preferences
{
    section
    {
        input "ipAddress", "text", title: "IP address of Shelly device", required: true
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
    section
    {
        input "username", "text", title: "Username to use.  If blank, authorization will not be newly enabled.  If it was previously enabled, you must enter the correct username here.", required: false
        input "password", "text", title: "Password to use.  If blank, authorization will not be newly enabled.  If it was previously enabled, you must enter the correct password here.", required: false
        input "refreshInterval", "number", title: "Refresh interval (seconds)", defaultValue: 10, required: true
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def initialize()
{
    refresh()
}

def updated()
{
    removeCommon()
    configure()
}

def configure()
{
    unschedule()
    
    try
    {
        state.childrenDnis = state.childrenDnis ?: [:]
        
        // check if the child device exists, and create it if needed
        getCommon() ?: createAndConfigCommon()
        
        def settings = getCommon().readSettings(true)
        
        def child
        def dni, name
        
        settings?.adcs?.eachWithIndex
        { it, i ->
            def alias = "adc${i}"
            dni = genDniFormat(alias)
            name = genNameFormat(alias)
            child = manageChildDevice("Shelly ADC Child", dni, [isComponent: false, name: name, label: name, alias: alias])
            child.setupDetails([adcNum: i.toString()])
            state.childrenDnis[(alias)] = dni
        }
        
        settings?.relays?.eachWithIndex
        { it, i ->
            def alias = "relay${i}"
            dni = genDniFormat(alias)
            name = genNameFormat(alias)
            child = manageChildDevice("Shelly Relay Child", dni, [isComponent: false, name: name, label: name, alias: alias])
            child.setupDetails([relayNum: i.toString()])
            state.childrenDnis[(alias)] = dni
        }
        
        [0, 1].eachWithIndex
        { it, i ->
            def alias = "input${i}"
            dni = genDniFormat(alias)
            name = genNameFormat(alias)
            child = manageChildDevice("Shelly Input Child", dni, [isComponent: false, name: name, label: name, alias: alias])
            child.setupDetails([inputNum: i.toString()])
            state.childrenDnis[(alias)] = dni
        }
        
        device.setDeviceNetworkId(settings.device.mac)
        setCallbackURLs()
        
        initialize()
    }
    catch (Exception e)
    {
        logDebug("configure() failed: ${e.message}")
    }
}

def manageChildDevice(type, dni, details)
{
    def child
    
    if(state.childrenDnis?.getAt(details.alias))
    {
        def oldDni = state.childrenDnis[(details.alias)]
        
        // if the oldDni exists, we want to try to update the existing device
        def dniToUse = (oldDni != dni) ? oldDni : dni        
        child = getChildDevice(dniToUse) ?: addChildDevice(type, dni, details)
    }
    else
    {
        // as far as we know, the child doesn't exist.  create it.
        child = addChildDevice(type, dni, details)
    }
    
    if(child)
    {
        child.setDeviceNetworkId(dni)
        state.childrenDnis[(details.alias)] = dni
        
        return child
    }
    
    return
}

def pushEventFromChild(name, value)
{
    sendEvent(name: name, value: value)
}

def refresh(useCachedValues)
{
    unschedule(refresh)  

    for(child in getChildDevices())
    {
        child.refresh()
    }
    
    // check for things like external temperature sensors
    def status = getCommon()?.getStatusEx()
    if(null != status)
    {
        if(status.ext_temperature && status.ext_sensors?.temperature_unit)
        {
            sendEvent(name: "extTempSensorPresent", value: true)
            sendEvent(
                name: "extTempSensorValue",
                value: ("F" == status.ext_sensors.temperature_unit) ? status.ext_temperature."0".tF : status.ext_temperature."0".tC)
        }
        else
        {
            sendEvent(name: "extTempSensorPresent", value: false)
        }
    }
    
    runIn(refreshInterval.toFloat().toInteger(), refresh)
}

def uninstalled()
{
    unschedule()
}

def disableLogin()
{
    getCommon()?.disableLogin()
}

def createAndConfigCommon()
{
    def tempId = new Date().getTime().toString()
    
    // placeholder DNI to query for MAC    
    def child = manageChildDevice("Shelly Common", tempId, [isComponent: false, name: "common", label: "common"])
    child.setupDetails([ipAddress: ipAddress, username: username, password: password])    
    def settings = child.readSettings(false)
    
    if(!settings)
    {
        // we didn't get a response from Shelly, so clean up and return
        deleteChildDevice(child.getDeviceNetworkId())
        throw new Exception("failed to reach Shelly device")
    }
    
    // set to actual MAC-based DNI and continue with config
    def commonDni = genDniFormat("common", settings.device.mac)
    child.setupDetails([ipAddress: ipAddress, username: username, password: password, dni: commonDni])
    
    // save away these details
    state.childrenDnis.common = commonDni
    state.mac = settings.device.mac
}

def getCommon()
{
    return getChildDevice(state.childrenDnis?.common)
}

def removeCommon()
{
    def ch = getCommon()
    if(ch)
    {
        deleteChildDevice(ch.getDeviceNetworkId())
        state.childrenDnis?.common = null
    }
}

def genDniFormat(prefix, mac = null)
{
    return prefix + "-" + (mac ? mac : state.mac)
}

def genNameFormat(suffix)
{
    return device.name + "-" + suffix
}

def setCallbackURLs()
{
    def hubURL = "http://${location.hub.localIP}:${location.hub.localSrvPortTCP}"
    logDebug("setCallBackURLs() hubURL = ${hubURL}")
    
    for(child in getChildDevices())
    {
        child.setCallbackURLs(hubURL)
    }
}

def parse(resp)
{
    // handle replies from the device
    logDebug("Shelly device message received")
    
    // just refresh() on any change
    refresh()
}
