/*

 */

metadata
{
    definition(name: "Shelly Button Child", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "DoubleTapableButton"
        capability "HoldableButton"
        capability "PushableButton"
        capability "RelaySwitch"
        capability "Switch"
        
        attribute "tripleTapped", "number"
        attribute "shortPushedLongPushed", "number"
        attribute "longPushedShortPushed", "number"
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input "inputNum", "text", title: "Input number of this child", required: true
    }
}

def setupDetails(details)
{
    device.updateSetting("inputNum", details.inputNum)
    sendEvent(name: "numberOfButtons", value: details.inputNum)
}

def refresh()
{
    // no-op, but here for compatibility
}

def setCallbackURLs(URL)
{
    appendCallbackURLs("shortpush_url", URL + "/button${inputNum.toInteger()}/S")
    appendCallbackURLs("double_shortpush_url", URL + "/button${inputNum.toInteger()}/SS")
    appendCallbackURLs("triple_shortpush_url", URL + "/button${inputNum.toInteger()}/SSS")
    appendCallbackURLs("longpush_url", URL + "/button${inputNum.toInteger()}/L")
    appendCallbackURLs("shortpush_longpush_url", URL + "/button${inputNum.toInteger()}/SL")
    appendCallbackURLs("longpush_shortpush_url", URL + "/button${inputNum.toInteger()}/LS")
    appendCallbackURLs("btn_on_url", URL + "/button${inputNum.toInteger()}/ON")
    appendCallbackURLs("btn_off_url", URL + "/button${inputNum.toInteger()}/OFF")
}

def appendCallbackURLs(name, URL)
{
    // shelly buttons are 0..(n-1) and Hubitat are 1..n
    def shellyButtonNum = inputNum.toInteger() - 1
    
    def actions = getParent()?.getCommon()?.readSettingAction()?.actions
    
    // don't overwrite existing URLs, in case they were important to the user
    def existingUrls = actions?.getAt(name)?.getAt(shellyButtonNum)?.getAt("urls")    
    if(!existingUrls?.contains(URL.toString()))
    {
        existingUrls += URL
    }
    
    URL = existingUrls.collect{it}.join("&urls[]=")
    
    getParent()?.getCommon()?.writeSettingAction(name, shellyButtonNum, URL, true)
}

def parse(List<String> header)
{
    header.each
    {
        if(eventsMap[it[1]])
        {
            // momentary events
            sendEvent(name: eventsMap[it[1]], value: inputNum.toInteger(), isStateChange: true)
        }
        else
        {
            // toggle events
            switch(it[1])
            {
                case "ON":
                    sendEvent(name: "switch", value: "on", isStateChange: true)
                    break
                
                case "OFF":
                    sendEvent(name: "switch", value: "off", isStateChange: true)
                    break
            }
        }
    }
}

def push(buttonNumber = 1)
{
    parse(["button", "S"])
}

def doubleTap(buttonNumber = 1)
{
    parse(["button", "SS"])
}

def tripleTap(buttonNumber = 1)
{
    parse(["button", "SSS"])
}

def hold(buttonNumber = 1)
{
    parse(["button", "L"])
}

def on()
{
    parse(["button", "ON"])
}

def off()
{
    parse(["button", "OFF"])
}

import groovy.transform.Field
@Field Map eventsMap =
    [
        "S": "pushed",
        "SS": "doubleTapped",
        "SSS": "tripleTapped",
        "L": "held",
        "SL": "shortPushedLongPushed",
        "LS": "longPushedShortPushed"
    ]
